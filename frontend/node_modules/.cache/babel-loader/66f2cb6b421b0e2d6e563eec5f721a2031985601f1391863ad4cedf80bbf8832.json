{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nexport default function useKrakenPrices() {\n  _s();\n  const [cryptos, setCryptos] = useState([]);\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        // 1. Вземаме търговските двойки от Kraken през CoinGecko\n        const res = await fetch(\"https://api.coingecko.com/api/v3/exchanges/kraken\");\n        const data = await res.json();\n        if (!data.tickers) return;\n        const usdPairs = data.tickers.filter(t => t.target === \"USD\");\n\n        // 2. Вземаме топ 20 по обем в USD\n        const top20 = usdPairs.sort((a, b) => {\n          var _b$converted_volume, _a$converted_volume;\n          return (((_b$converted_volume = b.converted_volume) === null || _b$converted_volume === void 0 ? void 0 : _b$converted_volume.usd) || 0) - (((_a$converted_volume = a.converted_volume) === null || _a$converted_volume === void 0 ? void 0 : _a$converted_volume.usd) || 0);\n        }).slice(0, 20);\n\n        // 3. Взимаме имената и логата от отделно API за монетите\n        const coinListRes = await fetch(\"https://api.coingecko.com/api/v3/coins/list?include_platform=false\");\n        const coinList = await coinListRes.json();\n\n        // 4. Мапваме и търсим името и логото\n        const mapped = await Promise.all(top20.map(async t => {\n          var _coinData$image;\n          const coinDataRes = await fetch(`https://api.coingecko.com/api/v3/coins/${t.base.toLowerCase()}`);\n          if (!coinDataRes.ok) return null; // ако няма данни\n          const coinData = await coinDataRes.json();\n          return {\n            symbol: `${t.base}/${t.target}`,\n            name: coinData.name,\n            logo: ((_coinData$image = coinData.image) === null || _coinData$image === void 0 ? void 0 : _coinData$image.thumb) || \"\",\n            price: t.last\n          };\n        }));\n        setCryptos(mapped.filter(Boolean)); // премахваме null\n      } catch (err) {\n        console.error(\"Error fetching Kraken top 20:\", err);\n      }\n    }\n    fetchData();\n  }, []);\n  return cryptos;\n}\n_s(useKrakenPrices, \"EQJvBb3StcVAt/RsPLmS7z4HOdE=\");","map":{"version":3,"names":["useEffect","useState","useKrakenPrices","_s","cryptos","setCryptos","fetchData","res","fetch","data","json","tickers","usdPairs","filter","t","target","top20","sort","a","b","_b$converted_volume","_a$converted_volume","converted_volume","usd","slice","coinListRes","coinList","mapped","Promise","all","map","_coinData$image","coinDataRes","base","toLowerCase","ok","coinData","symbol","name","logo","image","thumb","price","last","Boolean","err","console","error"],"sources":["C:/Users/User/Documents/Trading212/TradingSimulation/frontend/src/Cryptos/KrakenApi.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nexport default function useKrakenPrices() {\r\n    const [cryptos, setCryptos] = useState([]);\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            try {\r\n                // 1. Вземаме търговските двойки от Kraken през CoinGecko\r\n                const res = await fetch(\"https://api.coingecko.com/api/v3/exchanges/kraken\");\r\n                const data = await res.json();\r\n                if (!data.tickers) return;\r\n\r\n                const usdPairs = data.tickers.filter(t => t.target === \"USD\");\r\n\r\n                // 2. Вземаме топ 20 по обем в USD\r\n                const top20 = usdPairs\r\n                    .sort((a, b) => \r\n                        (b.converted_volume?.usd || 0) - (a.converted_volume?.usd || 0)\r\n                    )\r\n                    .slice(0, 20);\r\n\r\n                // 3. Взимаме имената и логата от отделно API за монетите\r\n                const coinListRes = await fetch(\"https://api.coingecko.com/api/v3/coins/list?include_platform=false\");\r\n                const coinList = await coinListRes.json();\r\n\r\n                // 4. Мапваме и търсим името и логото\r\n                const mapped = await Promise.all(\r\n                    top20.map(async (t) => {\r\n                        const coinDataRes = await fetch(`https://api.coingecko.com/api/v3/coins/${t.base.toLowerCase()}`);\r\n                        if (!coinDataRes.ok) return null; // ако няма данни\r\n                        const coinData = await coinDataRes.json();\r\n\r\n                        return {\r\n                            symbol: `${t.base}/${t.target}`,\r\n                            name: coinData.name,\r\n                            logo: coinData.image?.thumb || \"\",\r\n                            price: t.last\r\n                        };\r\n                    })\r\n                );\r\n\r\n                setCryptos(mapped.filter(Boolean)); // премахваме null\r\n            } catch (err) {\r\n                console.error(\"Error fetching Kraken top 20:\", err);\r\n            }\r\n        }\r\n\r\n        fetchData();\r\n    }, []);\r\n\r\n    return cryptos;\r\n}\r\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C,eAAe,SAASC,eAAeA,CAAA,EAAG;EAAAC,EAAA;EACtC,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGJ,QAAQ,CAAC,EAAE,CAAC;EAE1CD,SAAS,CAAC,MAAM;IACZ,eAAeM,SAASA,CAAA,EAAG;MACvB,IAAI;QACA;QACA,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,mDAAmD,CAAC;QAC5E,MAAMC,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAI,CAAC,CAAC;QAC7B,IAAI,CAACD,IAAI,CAACE,OAAO,EAAE;QAEnB,MAAMC,QAAQ,GAAGH,IAAI,CAACE,OAAO,CAACE,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACC,MAAM,KAAK,KAAK,CAAC;;QAE7D;QACA,MAAMC,KAAK,GAAGJ,QAAQ,CACjBK,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC;UAAA,IAAAC,mBAAA,EAAAC,mBAAA;UAAA,OACP,CAAC,EAAAD,mBAAA,GAAAD,CAAC,CAACG,gBAAgB,cAAAF,mBAAA,uBAAlBA,mBAAA,CAAoBG,GAAG,KAAI,CAAC,KAAK,EAAAF,mBAAA,GAAAH,CAAC,CAACI,gBAAgB,cAAAD,mBAAA,uBAAlBA,mBAAA,CAAoBE,GAAG,KAAI,CAAC,CAAC;QAAA,CACnE,CAAC,CACAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;;QAEjB;QACA,MAAMC,WAAW,GAAG,MAAMjB,KAAK,CAAC,oEAAoE,CAAC;QACrG,MAAMkB,QAAQ,GAAG,MAAMD,WAAW,CAACf,IAAI,CAAC,CAAC;;QAEzC;QACA,MAAMiB,MAAM,GAAG,MAAMC,OAAO,CAACC,GAAG,CAC5Bb,KAAK,CAACc,GAAG,CAAC,MAAOhB,CAAC,IAAK;UAAA,IAAAiB,eAAA;UACnB,MAAMC,WAAW,GAAG,MAAMxB,KAAK,CAAC,0CAA0CM,CAAC,CAACmB,IAAI,CAACC,WAAW,CAAC,CAAC,EAAE,CAAC;UACjG,IAAI,CAACF,WAAW,CAACG,EAAE,EAAE,OAAO,IAAI,CAAC,CAAC;UAClC,MAAMC,QAAQ,GAAG,MAAMJ,WAAW,CAACtB,IAAI,CAAC,CAAC;UAEzC,OAAO;YACH2B,MAAM,EAAE,GAAGvB,CAAC,CAACmB,IAAI,IAAInB,CAAC,CAACC,MAAM,EAAE;YAC/BuB,IAAI,EAAEF,QAAQ,CAACE,IAAI;YACnBC,IAAI,EAAE,EAAAR,eAAA,GAAAK,QAAQ,CAACI,KAAK,cAAAT,eAAA,uBAAdA,eAAA,CAAgBU,KAAK,KAAI,EAAE;YACjCC,KAAK,EAAE5B,CAAC,CAAC6B;UACb,CAAC;QACL,CAAC,CACL,CAAC;QAEDtC,UAAU,CAACsB,MAAM,CAACd,MAAM,CAAC+B,OAAO,CAAC,CAAC,CAAC,CAAC;MACxC,CAAC,CAAC,OAAOC,GAAG,EAAE;QACVC,OAAO,CAACC,KAAK,CAAC,+BAA+B,EAAEF,GAAG,CAAC;MACvD;IACJ;IAEAvC,SAAS,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;EAEN,OAAOF,OAAO;AAClB;AAACD,EAAA,CAlDuBD,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}