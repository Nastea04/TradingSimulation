{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState, useRef } from \"react\";\nexport default function useKrakenPrices2(pairs) {\n  _s();\n  const [prices, setPrices] = useState({});\n  const wsRef = useRef(null);\n  const reconnectTimeoutRef = useRef(null);\n  const heartbeatIntervalRef = useRef(null);\n  const retryDelayRef = useRef(3000); // стартов reconnect delay\n  const isUnmountedRef = useRef(false);\n\n  // --- Heartbeat (ping) ---\n  const startHeartbeat = (ws, intervalMs = 15000) => {\n    return setInterval(() => {\n      if (ws.readyState === WebSocket.OPEN) {\n        ws.send(JSON.stringify({\n          method: \"ping\"\n        }));\n      }\n    }, intervalMs);\n  };\n  const stopHeartbeat = intervalId => {\n    clearInterval(intervalId);\n  };\n\n  // --- Основна логика за свързване ---\n  const connect = () => {\n    if (isUnmountedRef.current) return;\n    const ws = new WebSocket(\"wss://ws.kraken.com/v2\");\n    wsRef.current = ws;\n    ws.onopen = () => {\n      console.log(\"✅ Connected to Kraken\");\n\n      // Нулираме reconnect delay при успешна връзка\n      retryDelayRef.current = 3000;\n\n      // Форматираме символите правилно\n      const symbols = Array.isArray(pairs) ? pairs : [pairs];\n\n      // Subscribe\n      ws.send(JSON.stringify({\n        method: \"subscribe\",\n        params: {\n          channel: \"ticker\",\n          symbol: symbols\n        }\n      }));\n\n      // Стартираме heartbeat\n      heartbeatIntervalRef.current = startHeartbeat(ws, 15000);\n    };\n    ws.onmessage = event => {\n      try {\n        const msg = JSON.parse(event.data);\n        if (msg.channel === \"ticker\" && (msg.type === \"snapshot\" || msg.type === \"update\")) {\n          msg.data.forEach(ticker => {\n            setPrices(prev => ({\n              ...prev,\n              [ticker.symbol]: ticker.last\n            }));\n          });\n        }\n      } catch (err) {\n        console.error(\"❌ Parse error:\", err);\n      }\n    };\n    ws.onerror = () => {\n      console.error(\"⚠️ WebSocket error\");\n    };\n    ws.onclose = event => {\n      console.warn(`⚠️ Closed: code=${event.code}, reason=${event.reason || \"No reason\"}`);\n      stopHeartbeat(heartbeatIntervalRef.current);\n\n      // Ако затварянето не е нормално → reconnect\n      if (!isUnmountedRef.current && event.code !== 1000) {\n        console.log(`🔄 Reconnecting in ${retryDelayRef.current / 1000}s...`);\n        reconnectTimeoutRef.current = setTimeout(connect, retryDelayRef.current);\n        retryDelayRef.current = Math.min(retryDelayRef.current * 2, 60000); // макс 60 сек\n      }\n    };\n  };\n\n  // --- Стартиране ---\n  useEffect(() => {\n    connect();\n    return () => {\n      isUnmountedRef.current = true;\n      clearTimeout(reconnectTimeoutRef.current);\n      stopHeartbeat(heartbeatIntervalRef.current);\n      if (wsRef.current) wsRef.current.close();\n    };\n  }, [pairs]);\n  return prices;\n}\n_s(useKrakenPrices2, \"oEy22gpccNjIVWbTH9rctSk0iuI=\");","map":{"version":3,"names":["useEffect","useState","useRef","useKrakenPrices2","pairs","_s","prices","setPrices","wsRef","reconnectTimeoutRef","heartbeatIntervalRef","retryDelayRef","isUnmountedRef","startHeartbeat","ws","intervalMs","setInterval","readyState","WebSocket","OPEN","send","JSON","stringify","method","stopHeartbeat","intervalId","clearInterval","connect","current","onopen","console","log","symbols","Array","isArray","params","channel","symbol","onmessage","event","msg","parse","data","type","forEach","ticker","prev","last","err","error","onerror","onclose","warn","code","reason","setTimeout","Math","min","clearTimeout","close"],"sources":["C:/Users/User/Documents/Trading212/TradingSimulation/frontend/src/Cryptos/KrakenApi.js"],"sourcesContent":["import { useEffect, useState, useRef } from \"react\";\r\n\r\nexport default function useKrakenPrices2(pairs) {\r\n    const [prices, setPrices] = useState({});\r\n    const wsRef = useRef(null);\r\n    const reconnectTimeoutRef = useRef(null);\r\n    const heartbeatIntervalRef = useRef(null);\r\n    const retryDelayRef = useRef(3000); // стартов reconnect delay\r\n    const isUnmountedRef = useRef(false);\r\n\r\n    // --- Heartbeat (ping) ---\r\n    const startHeartbeat = (ws, intervalMs = 15000) => {\r\n        return setInterval(() => {\r\n            if (ws.readyState === WebSocket.OPEN) {\r\n                ws.send(JSON.stringify({ method: \"ping\" }));\r\n            }\r\n        }, intervalMs);\r\n    };\r\n\r\n    const stopHeartbeat = (intervalId) => {\r\n        clearInterval(intervalId);\r\n    };\r\n\r\n    // --- Основна логика за свързване ---\r\n    const connect = () => {\r\n        if (isUnmountedRef.current) return;\r\n\r\n        const ws = new WebSocket(\"wss://ws.kraken.com/v2\");\r\n        wsRef.current = ws;\r\n\r\n        ws.onopen = () => {\r\n            console.log(\"✅ Connected to Kraken\");\r\n\r\n            // Нулираме reconnect delay при успешна връзка\r\n            retryDelayRef.current = 3000;\r\n\r\n            // Форматираме символите правилно\r\n            const symbols = Array.isArray(pairs) ? pairs : [pairs];\r\n\r\n            // Subscribe\r\n            ws.send(JSON.stringify({\r\n                method: \"subscribe\",\r\n                params: {\r\n                    channel: \"ticker\",\r\n                    symbol: symbols\r\n                }\r\n            }));\r\n\r\n            // Стартираме heartbeat\r\n            heartbeatIntervalRef.current = startHeartbeat(ws, 15000);\r\n        };\r\n\r\n        ws.onmessage = (event) => {\r\n            try {\r\n                const msg = JSON.parse(event.data);\r\n\r\n                if (msg.channel === \"ticker\" &&\r\n                    (msg.type === \"snapshot\" || msg.type === \"update\")) {\r\n                    msg.data.forEach(ticker => {\r\n                        setPrices(prev => ({\r\n                            ...prev,\r\n                            [ticker.symbol]: ticker.last\r\n                        }));\r\n                    });\r\n                }\r\n            } catch (err) {\r\n                console.error(\"❌ Parse error:\", err);\r\n            }\r\n        };\r\n\r\n        ws.onerror = () => {\r\n            console.error(\"⚠️ WebSocket error\");\r\n        };\r\n\r\n        ws.onclose = (event) => {\r\n            console.warn(`⚠️ Closed: code=${event.code}, reason=${event.reason || \"No reason\"}`);\r\n\r\n            stopHeartbeat(heartbeatIntervalRef.current);\r\n\r\n            // Ако затварянето не е нормално → reconnect\r\n            if (!isUnmountedRef.current && event.code !== 1000) {\r\n                console.log(`🔄 Reconnecting in ${retryDelayRef.current / 1000}s...`);\r\n                reconnectTimeoutRef.current = setTimeout(connect, retryDelayRef.current);\r\n                retryDelayRef.current = Math.min(retryDelayRef.current * 2, 60000); // макс 60 сек\r\n            }\r\n        };\r\n    };\r\n\r\n    // --- Стартиране ---\r\n    useEffect(() => {\r\n        connect();\r\n\r\n        return () => {\r\n            isUnmountedRef.current = true;\r\n            clearTimeout(reconnectTimeoutRef.current);\r\n            stopHeartbeat(heartbeatIntervalRef.current);\r\n            if (wsRef.current) wsRef.current.close();\r\n        };\r\n    }, [pairs]);\r\n\r\n    return prices;\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}