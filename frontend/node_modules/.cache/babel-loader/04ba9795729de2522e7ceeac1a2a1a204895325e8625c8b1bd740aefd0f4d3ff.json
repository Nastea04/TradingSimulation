{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nexport default function useKrakenPrices(pairs) {\n  _s();\n  const [prices, setPrices] = useState({});\n  useEffect(() => {\n    if (!pairs || pairs.length === 0) return;\n\n    // Премахваме празни или неподдържани символи\n    const validPairs = pairs.filter(p => typeof p === \"string\" && p.includes(\"/\"));\n    if (validPairs.length === 0) return;\n    const ws = new WebSocket(\"wss://ws.kraken.com/v2\");\n    ws.onopen = () => {\n      console.log(\"✅ Connected to Kraken v2\");\n\n      // Малко изчакване за стабилен subscribe\n      setTimeout(() => {\n        ws.send(JSON.stringify({\n          method: \"subscribe\",\n          params: {\n            channel: \"ticker\",\n            symbol: validPairs\n          }\n        }));\n        console.log(\"📡 Subscribed to:\", validPairs);\n      }, 150);\n    };\n    ws.onmessage = event => {\n      try {\n        const msg = JSON.parse(event.data);\n\n        // Проверяваме дали е ticker snapshot или update\n        if (msg.channel === \"ticker\" && (msg.type === \"snapshot\" || msg.type === \"update\")) {\n          msg.data.forEach(ticker => {\n            // Взимаме правилно last цена (може да е число или масив)\n            const lastPrice = Array.isArray(ticker.last) ? ticker.last[0] : ticker.last;\n            setPrices(prev => ({\n              ...prev,\n              [ticker.symbol]: parseFloat(lastPrice).toFixed(2)\n            }));\n          });\n        }\n      } catch (err) {\n        console.error(\"❌ Error parsing Kraken message:\", err);\n      }\n    };\n    ws.onclose = () => console.log(\"🔌 Disconnected from Kraken\");\n    return () => ws.close();\n  }, [pairs]);\n  return prices;\n}\n_s(useKrakenPrices, \"AyDZng7+aEBipOGwqaguTBzobZI=\");","map":{"version":3,"names":["useEffect","useState","useKrakenPrices","pairs","_s","prices","setPrices","length","validPairs","filter","p","includes","ws","WebSocket","onopen","console","log","setTimeout","send","JSON","stringify","method","params","channel","symbol","onmessage","event","msg","parse","data","type","forEach","ticker","lastPrice","Array","isArray","last","prev","parseFloat","toFixed","err","error","onclose","close"],"sources":["C:/Users/User/Documents/Trading212/TradingSimulation/frontend/src/Cryptos/TestKraken.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nexport default function useKrakenPrices(pairs) {\r\n    const [prices, setPrices] = useState({});\r\n\r\n    useEffect(() => {\r\n        if (!pairs || pairs.length === 0) return;\r\n\r\n        // Премахваме празни или неподдържани символи\r\n        const validPairs = pairs.filter(p => typeof p === \"string\" && p.includes(\"/\"));\r\n        if (validPairs.length === 0) return;\r\n\r\n        const ws = new WebSocket(\"wss://ws.kraken.com/v2\");\r\n\r\n        ws.onopen = () => {\r\n            console.log(\"✅ Connected to Kraken v2\");\r\n\r\n            // Малко изчакване за стабилен subscribe\r\n            setTimeout(() => {\r\n                ws.send(JSON.stringify({\r\n                    method: \"subscribe\",\r\n                    params: {\r\n                        channel: \"ticker\",\r\n                        symbol: validPairs\r\n                    }\r\n                }));\r\n                console.log(\"📡 Subscribed to:\", validPairs);\r\n            }, 150);\r\n        };\r\n\r\n        ws.onmessage = (event) => {\r\n            try {\r\n                const msg = JSON.parse(event.data);\r\n\r\n                // Проверяваме дали е ticker snapshot или update\r\n                if (msg.channel === \"ticker\" && (msg.type === \"snapshot\" || msg.type === \"update\")) {\r\n                    msg.data.forEach(ticker => {\r\n                        // Взимаме правилно last цена (може да е число или масив)\r\n                        const lastPrice = Array.isArray(ticker.last) ? ticker.last[0] : ticker.last;\r\n                        \r\n                        setPrices(prev => ({\r\n                            ...prev,\r\n                            [ticker.symbol]: parseFloat(lastPrice).toFixed(2)\r\n                        }));\r\n                    });\r\n                }\r\n\r\n            } catch (err) {\r\n                console.error(\"❌ Error parsing Kraken message:\", err);\r\n            }\r\n        };\r\n\r\n        ws.onclose = () => console.log(\"🔌 Disconnected from Kraken\");\r\n\r\n        return () => ws.close();\r\n    }, [pairs]);\r\n\r\n    return prices;\r\n}\r\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C,eAAe,SAASC,eAAeA,CAACC,KAAK,EAAE;EAAAC,EAAA;EAC3C,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGL,QAAQ,CAAC,CAAC,CAAC,CAAC;EAExCD,SAAS,CAAC,MAAM;IACZ,IAAI,CAACG,KAAK,IAAIA,KAAK,CAACI,MAAM,KAAK,CAAC,EAAE;;IAElC;IACA,MAAMC,UAAU,GAAGL,KAAK,CAACM,MAAM,CAACC,CAAC,IAAI,OAAOA,CAAC,KAAK,QAAQ,IAAIA,CAAC,CAACC,QAAQ,CAAC,GAAG,CAAC,CAAC;IAC9E,IAAIH,UAAU,CAACD,MAAM,KAAK,CAAC,EAAE;IAE7B,MAAMK,EAAE,GAAG,IAAIC,SAAS,CAAC,wBAAwB,CAAC;IAElDD,EAAE,CAACE,MAAM,GAAG,MAAM;MACdC,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;;MAEvC;MACAC,UAAU,CAAC,MAAM;QACbL,EAAE,CAACM,IAAI,CAACC,IAAI,CAACC,SAAS,CAAC;UACnBC,MAAM,EAAE,WAAW;UACnBC,MAAM,EAAE;YACJC,OAAO,EAAE,QAAQ;YACjBC,MAAM,EAAEhB;UACZ;QACJ,CAAC,CAAC,CAAC;QACHO,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAER,UAAU,CAAC;MAChD,CAAC,EAAE,GAAG,CAAC;IACX,CAAC;IAEDI,EAAE,CAACa,SAAS,GAAIC,KAAK,IAAK;MACtB,IAAI;QACA,MAAMC,GAAG,GAAGR,IAAI,CAACS,KAAK,CAACF,KAAK,CAACG,IAAI,CAAC;;QAElC;QACA,IAAIF,GAAG,CAACJ,OAAO,KAAK,QAAQ,KAAKI,GAAG,CAACG,IAAI,KAAK,UAAU,IAAIH,GAAG,CAACG,IAAI,KAAK,QAAQ,CAAC,EAAE;UAChFH,GAAG,CAACE,IAAI,CAACE,OAAO,CAACC,MAAM,IAAI;YACvB;YACA,MAAMC,SAAS,GAAGC,KAAK,CAACC,OAAO,CAACH,MAAM,CAACI,IAAI,CAAC,GAAGJ,MAAM,CAACI,IAAI,CAAC,CAAC,CAAC,GAAGJ,MAAM,CAACI,IAAI;YAE3E9B,SAAS,CAAC+B,IAAI,KAAK;cACf,GAAGA,IAAI;cACP,CAACL,MAAM,CAACR,MAAM,GAAGc,UAAU,CAACL,SAAS,CAAC,CAACM,OAAO,CAAC,CAAC;YACpD,CAAC,CAAC,CAAC;UACP,CAAC,CAAC;QACN;MAEJ,CAAC,CAAC,OAAOC,GAAG,EAAE;QACVzB,OAAO,CAAC0B,KAAK,CAAC,iCAAiC,EAAED,GAAG,CAAC;MACzD;IACJ,CAAC;IAED5B,EAAE,CAAC8B,OAAO,GAAG,MAAM3B,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;IAE7D,OAAO,MAAMJ,EAAE,CAAC+B,KAAK,CAAC,CAAC;EAC3B,CAAC,EAAE,CAACxC,KAAK,CAAC,CAAC;EAEX,OAAOE,MAAM;AACjB;AAACD,EAAA,CAxDuBF,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}