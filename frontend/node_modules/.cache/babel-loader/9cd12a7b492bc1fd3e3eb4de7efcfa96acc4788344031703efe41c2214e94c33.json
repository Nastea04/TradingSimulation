{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nexport default function useKrakenPrices(symbols = []) {\n  _s();\n  const [prices, setPrices] = useState({});\n  useEffect(() => {\n    if (!symbols.length) return;\n    const ws = new WebSocket(\"wss://ws.kraken.com/v2\");\n    ws.onopen = () => {\n      ws.send(JSON.stringify({\n        method: \"subscribe\",\n        params: {\n          channel: \"ticker\",\n          symbol: symbols\n        }\n      }));\n    };\n    ws.onmessage = event => {\n      const data = JSON.parse(event.data);\n      if (data.channel === \"ticker\" && data.type === \"update\") {\n        const {\n          symbol,\n          price\n        } = data.data[0];\n        setPrices(prev => ({\n          ...prev,\n          [symbol]: parseFloat(price).toFixed(2)\n        }));\n      }\n    };\n    return () => ws.close();\n  }, [symbols]);\n  return prices;\n}\n_s(useKrakenPrices, \"AyDZng7+aEBipOGwqaguTBzobZI=\");","map":{"version":3,"names":["useEffect","useState","useKrakenPrices","symbols","_s","prices","setPrices","length","ws","WebSocket","onopen","send","JSON","stringify","method","params","channel","symbol","onmessage","event","data","parse","type","price","prev","parseFloat","toFixed","close"],"sources":["C:/Users/User/Documents/Trading212/TradingSimulation/frontend/src/KrackenApi.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nexport default function useKrakenPrices(symbols = []) {\r\n    const [prices, setPrices] = useState({});\r\n\r\n    useEffect(() => {\r\n        if (!symbols.length) return;\r\n\r\n        const ws = new WebSocket(\"wss://ws.kraken.com/v2\");\r\n\r\n        ws.onopen = () => {\r\n            ws.send(JSON.stringify({\r\n                method: \"subscribe\",\r\n                params: {\r\n                    channel: \"ticker\",\r\n                    symbol: symbols\r\n                }\r\n            }));\r\n        };\r\n\r\n        ws.onmessage = (event) => {\r\n            const data = JSON.parse(event.data);\r\n\r\n            if (data.channel === \"ticker\" && data.type === \"update\") {\r\n                const { symbol, price } = data.data[0];\r\n                setPrices(prev => ({\r\n                    ...prev,\r\n                    [symbol]: parseFloat(price).toFixed(2)\r\n                }));\r\n            }\r\n        };\r\n\r\n        return () => ws.close();\r\n    }, [symbols]);\r\n\r\n    return prices;\r\n}\r\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C,eAAe,SAASC,eAAeA,CAACC,OAAO,GAAG,EAAE,EAAE;EAAAC,EAAA;EAClD,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGL,QAAQ,CAAC,CAAC,CAAC,CAAC;EAExCD,SAAS,CAAC,MAAM;IACZ,IAAI,CAACG,OAAO,CAACI,MAAM,EAAE;IAErB,MAAMC,EAAE,GAAG,IAAIC,SAAS,CAAC,wBAAwB,CAAC;IAElDD,EAAE,CAACE,MAAM,GAAG,MAAM;MACdF,EAAE,CAACG,IAAI,CAACC,IAAI,CAACC,SAAS,CAAC;QACnBC,MAAM,EAAE,WAAW;QACnBC,MAAM,EAAE;UACJC,OAAO,EAAE,QAAQ;UACjBC,MAAM,EAAEd;QACZ;MACJ,CAAC,CAAC,CAAC;IACP,CAAC;IAEDK,EAAE,CAACU,SAAS,GAAIC,KAAK,IAAK;MACtB,MAAMC,IAAI,GAAGR,IAAI,CAACS,KAAK,CAACF,KAAK,CAACC,IAAI,CAAC;MAEnC,IAAIA,IAAI,CAACJ,OAAO,KAAK,QAAQ,IAAII,IAAI,CAACE,IAAI,KAAK,QAAQ,EAAE;QACrD,MAAM;UAAEL,MAAM;UAAEM;QAAM,CAAC,GAAGH,IAAI,CAACA,IAAI,CAAC,CAAC,CAAC;QACtCd,SAAS,CAACkB,IAAI,KAAK;UACf,GAAGA,IAAI;UACP,CAACP,MAAM,GAAGQ,UAAU,CAACF,KAAK,CAAC,CAACG,OAAO,CAAC,CAAC;QACzC,CAAC,CAAC,CAAC;MACP;IACJ,CAAC;IAED,OAAO,MAAMlB,EAAE,CAACmB,KAAK,CAAC,CAAC;EAC3B,CAAC,EAAE,CAACxB,OAAO,CAAC,CAAC;EAEb,OAAOE,MAAM;AACjB;AAACD,EAAA,CAlCuBF,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}