{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nexport default function useKrakenPricesRest(pairs, refreshInterval = 5000) {\n  _s();\n  const [prices, setPrices] = useState({});\n  useEffect(() => {\n    if (!pairs || pairs.length === 0) return;\n    const fetchPrices = async () => {\n      try {\n        // Пример: [\"BTC/USD\", \"ETH/USD\"] → \"BTCUSD,ETHUSD\"\n        const krakenSymbols = pairs.map(p => p.replace(\"/\", \"\")).join(\",\");\n        const res = await fetch(`https://api.kraken.com/0/public/Ticker?pair=${krakenSymbols}`);\n        const data = await res.json();\n        const updatedPrices = {};\n        for (const key in data.result) {\n          const lastPrice = data.result[key].c[0];\n          // Намираме оригиналния symbol (BTC/USD)\n          const originalSymbol = pairs.find(p => p.replace(\"/\", \"\") === key.replace(\"X\", \"\").replace(\"Z\", \"\"));\n          if (originalSymbol) {\n            updatedPrices[originalSymbol] = parseFloat(lastPrice).toFixed(2);\n          }\n        }\n        setPrices(updatedPrices);\n      } catch (err) {\n        console.error(\"Error fetching Kraken prices:\", err);\n      }\n    };\n    fetchPrices(); // Първо зареждане\n    const interval = setInterval(fetchPrices, refreshInterval);\n    return () => clearInterval(interval);\n  }, [pairs, refreshInterval]);\n  return prices;\n}\n_s(useKrakenPricesRest, \"AyDZng7+aEBipOGwqaguTBzobZI=\");","map":{"version":3,"names":["useEffect","useState","useKrakenPricesRest","pairs","refreshInterval","_s","prices","setPrices","length","fetchPrices","krakenSymbols","map","p","replace","join","res","fetch","data","json","updatedPrices","key","result","lastPrice","c","originalSymbol","find","parseFloat","toFixed","err","console","error","interval","setInterval","clearInterval"],"sources":["C:/Users/User/Documents/Trading212/TradingSimulation/frontend/src/Cryptos/KrakenApiBugSolve.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nexport default function useKrakenPricesRest(pairs, refreshInterval = 5000) {\r\n    const [prices, setPrices] = useState({});\r\n\r\n    useEffect(() => {\r\n        if (!pairs || pairs.length === 0) return;\r\n\r\n        const fetchPrices = async () => {\r\n            try {\r\n                // Пример: [\"BTC/USD\", \"ETH/USD\"] → \"BTCUSD,ETHUSD\"\r\n                const krakenSymbols = pairs.map(p => p.replace(\"/\", \"\")).join(\",\");\r\n                const res = await fetch(`https://api.kraken.com/0/public/Ticker?pair=${krakenSymbols}`);\r\n                const data = await res.json();\r\n\r\n                const updatedPrices = {};\r\n                for (const key in data.result) {\r\n                    const lastPrice = data.result[key].c[0];\r\n                    // Намираме оригиналния symbol (BTC/USD)\r\n                    const originalSymbol = pairs.find(p => p.replace(\"/\", \"\") === key.replace(\"X\", \"\").replace(\"Z\", \"\"));\r\n                    if (originalSymbol) {\r\n                        updatedPrices[originalSymbol] = parseFloat(lastPrice).toFixed(2);\r\n                    }\r\n                }\r\n                setPrices(updatedPrices);\r\n            } catch (err) {\r\n                console.error(\"Error fetching Kraken prices:\", err);\r\n            }\r\n        };\r\n\r\n        fetchPrices(); // Първо зареждане\r\n        const interval = setInterval(fetchPrices, refreshInterval);\r\n\r\n        return () => clearInterval(interval);\r\n    }, [pairs, refreshInterval]);\r\n\r\n    return prices;\r\n}\r\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C,eAAe,SAASC,mBAAmBA,CAACC,KAAK,EAAEC,eAAe,GAAG,IAAI,EAAE;EAAAC,EAAA;EACvE,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGN,QAAQ,CAAC,CAAC,CAAC,CAAC;EAExCD,SAAS,CAAC,MAAM;IACZ,IAAI,CAACG,KAAK,IAAIA,KAAK,CAACK,MAAM,KAAK,CAAC,EAAE;IAElC,MAAMC,WAAW,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACA;QACA,MAAMC,aAAa,GAAGP,KAAK,CAACQ,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;QAClE,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,+CAA+CN,aAAa,EAAE,CAAC;QACvF,MAAMO,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAI,CAAC,CAAC;QAE7B,MAAMC,aAAa,GAAG,CAAC,CAAC;QACxB,KAAK,MAAMC,GAAG,IAAIH,IAAI,CAACI,MAAM,EAAE;UAC3B,MAAMC,SAAS,GAAGL,IAAI,CAACI,MAAM,CAACD,GAAG,CAAC,CAACG,CAAC,CAAC,CAAC,CAAC;UACvC;UACA,MAAMC,cAAc,GAAGrB,KAAK,CAACsB,IAAI,CAACb,CAAC,IAAIA,CAAC,CAACC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,KAAKO,GAAG,CAACP,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAACA,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;UACpG,IAAIW,cAAc,EAAE;YAChBL,aAAa,CAACK,cAAc,CAAC,GAAGE,UAAU,CAACJ,SAAS,CAAC,CAACK,OAAO,CAAC,CAAC,CAAC;UACpE;QACJ;QACApB,SAAS,CAACY,aAAa,CAAC;MAC5B,CAAC,CAAC,OAAOS,GAAG,EAAE;QACVC,OAAO,CAACC,KAAK,CAAC,+BAA+B,EAAEF,GAAG,CAAC;MACvD;IACJ,CAAC;IAEDnB,WAAW,CAAC,CAAC,CAAC,CAAC;IACf,MAAMsB,QAAQ,GAAGC,WAAW,CAACvB,WAAW,EAAEL,eAAe,CAAC;IAE1D,OAAO,MAAM6B,aAAa,CAACF,QAAQ,CAAC;EACxC,CAAC,EAAE,CAAC5B,KAAK,EAAEC,eAAe,CAAC,CAAC;EAE5B,OAAOE,MAAM;AACjB;AAACD,EAAA,CAnCuBH,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}