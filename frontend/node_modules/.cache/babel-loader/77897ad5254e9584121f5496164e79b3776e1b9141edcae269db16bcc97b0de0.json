{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nexport default function useTopKrakenCryptos() {\n  _s();\n  const [cryptos, setCryptos] = useState([]);\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        // 1. Вземаме топ 20 от CoinGecko\n        const geckoRes = await fetch(\"https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=20&page=1&sparkline=false\");\n        const geckoData = await geckoRes.json();\n\n        // 2. Вземаме всички търговски двойки от Kraken\n        const krakenRes = await fetch(\"https://api.kraken.com/0/public/AssetPairs\");\n        const krakenData = await krakenRes.json();\n        const krakenPairs = Object.keys(krakenData.result);\n\n        // 3. Мапваме символите към Kraken двойки\n        const mapped = geckoData.map(c => {\n          const baseSymbol = c.symbol.toUpperCase();\n\n          // Kraken често ползва XBT вместо BTC, XDG вместо DOGE\n          const possibleMatches = krakenPairs.filter(p => p.endsWith(\"USD\") && p.toUpperCase().startsWith(baseSymbol));\n\n          // Ако няма директно съвпадение, пробваме специални случаи\n          let krakenSymbol = possibleMatches[0];\n          if (!krakenSymbol) {\n            if (baseSymbol === \"BTC\") krakenSymbol = \"XBTUSD\";\n            if (baseSymbol === \"DOGE\") krakenSymbol = \"XDGUSD\";\n            if (baseSymbol === \"USDT\") krakenSymbol = \"USDTUSD\";\n            if (baseSymbol === \"BCH\") krakenSymbol = \"BCHUSD\";\n          }\n          return {\n            geckoSymbol: baseSymbol,\n            krakenPair: krakenSymbol,\n            name: c.name,\n            logo: c.image\n          };\n        }).filter(c => c.krakenPair); // Махаме тези без съвпадение\n\n        setCryptos(mapped);\n      } catch (err) {\n        console.error(\"Error fetching top Kraken cryptos:\", err);\n      }\n    }\n    fetchData();\n  }, []);\n  return cryptos;\n}\n_s(useTopKrakenCryptos, \"EQJvBb3StcVAt/RsPLmS7z4HOdE=\");","map":{"version":3,"names":["useEffect","useState","useTopKrakenCryptos","_s","cryptos","setCryptos","fetchData","geckoRes","fetch","geckoData","json","krakenRes","krakenData","krakenPairs","Object","keys","result","mapped","map","c","baseSymbol","symbol","toUpperCase","possibleMatches","filter","p","endsWith","startsWith","krakenSymbol","geckoSymbol","krakenPair","name","logo","image","err","console","error"],"sources":["C:/Users/User/Documents/Trading212/TradingSimulation/frontend/src/Cryptos/TopCryptos.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nexport default function useTopKrakenCryptos() {\r\n    const [cryptos, setCryptos] = useState([]);\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            try {\r\n                // 1. Вземаме топ 20 от CoinGecko\r\n                const geckoRes = await fetch(\r\n                    \"https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=20&page=1&sparkline=false\"\r\n                );\r\n                const geckoData = await geckoRes.json();\r\n\r\n                // 2. Вземаме всички търговски двойки от Kraken\r\n                const krakenRes = await fetch(\"https://api.kraken.com/0/public/AssetPairs\");\r\n                const krakenData = await krakenRes.json();\r\n                const krakenPairs = Object.keys(krakenData.result);\r\n\r\n                // 3. Мапваме символите към Kraken двойки\r\n                const mapped = geckoData.map(c => {\r\n                    const baseSymbol = c.symbol.toUpperCase();\r\n                    \r\n                    // Kraken често ползва XBT вместо BTC, XDG вместо DOGE\r\n                    const possibleMatches = krakenPairs.filter(\r\n                        p => p.endsWith(\"USD\") && p.toUpperCase().startsWith(baseSymbol)\r\n                    );\r\n\r\n                    // Ако няма директно съвпадение, пробваме специални случаи\r\n                    let krakenSymbol = possibleMatches[0];\r\n                    if (!krakenSymbol) {\r\n                        if (baseSymbol === \"BTC\") krakenSymbol = \"XBTUSD\";\r\n                        if (baseSymbol === \"DOGE\") krakenSymbol = \"XDGUSD\";\r\n                        if (baseSymbol === \"USDT\") krakenSymbol = \"USDTUSD\";\r\n                        if (baseSymbol === \"BCH\") krakenSymbol = \"BCHUSD\";\r\n                    }\r\n\r\n                    return {\r\n                        geckoSymbol: baseSymbol,\r\n                        krakenPair: krakenSymbol,\r\n                        name: c.name,\r\n                        logo: c.image\r\n                    };\r\n                }).filter(c => c.krakenPair); // Махаме тези без съвпадение\r\n\r\n                setCryptos(mapped);\r\n            } catch (err) {\r\n                console.error(\"Error fetching top Kraken cryptos:\", err);\r\n            }\r\n        }\r\n\r\n        fetchData();\r\n    }, []);\r\n\r\n    return cryptos;\r\n}\r\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C,eAAe,SAASC,mBAAmBA,CAAA,EAAG;EAAAC,EAAA;EAC1C,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGJ,QAAQ,CAAC,EAAE,CAAC;EAE1CD,SAAS,CAAC,MAAM;IACZ,eAAeM,SAASA,CAAA,EAAG;MACvB,IAAI;QACA;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CACxB,yHACJ,CAAC;QACD,MAAMC,SAAS,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;;QAEvC;QACA,MAAMC,SAAS,GAAG,MAAMH,KAAK,CAAC,4CAA4C,CAAC;QAC3E,MAAMI,UAAU,GAAG,MAAMD,SAAS,CAACD,IAAI,CAAC,CAAC;QACzC,MAAMG,WAAW,GAAGC,MAAM,CAACC,IAAI,CAACH,UAAU,CAACI,MAAM,CAAC;;QAElD;QACA,MAAMC,MAAM,GAAGR,SAAS,CAACS,GAAG,CAACC,CAAC,IAAI;UAC9B,MAAMC,UAAU,GAAGD,CAAC,CAACE,MAAM,CAACC,WAAW,CAAC,CAAC;;UAEzC;UACA,MAAMC,eAAe,GAAGV,WAAW,CAACW,MAAM,CACtCC,CAAC,IAAIA,CAAC,CAACC,QAAQ,CAAC,KAAK,CAAC,IAAID,CAAC,CAACH,WAAW,CAAC,CAAC,CAACK,UAAU,CAACP,UAAU,CACnE,CAAC;;UAED;UACA,IAAIQ,YAAY,GAAGL,eAAe,CAAC,CAAC,CAAC;UACrC,IAAI,CAACK,YAAY,EAAE;YACf,IAAIR,UAAU,KAAK,KAAK,EAAEQ,YAAY,GAAG,QAAQ;YACjD,IAAIR,UAAU,KAAK,MAAM,EAAEQ,YAAY,GAAG,QAAQ;YAClD,IAAIR,UAAU,KAAK,MAAM,EAAEQ,YAAY,GAAG,SAAS;YACnD,IAAIR,UAAU,KAAK,KAAK,EAAEQ,YAAY,GAAG,QAAQ;UACrD;UAEA,OAAO;YACHC,WAAW,EAAET,UAAU;YACvBU,UAAU,EAAEF,YAAY;YACxBG,IAAI,EAAEZ,CAAC,CAACY,IAAI;YACZC,IAAI,EAAEb,CAAC,CAACc;UACZ,CAAC;QACL,CAAC,CAAC,CAACT,MAAM,CAACL,CAAC,IAAIA,CAAC,CAACW,UAAU,CAAC,CAAC,CAAC;;QAE9BzB,UAAU,CAACY,MAAM,CAAC;MACtB,CAAC,CAAC,OAAOiB,GAAG,EAAE;QACVC,OAAO,CAACC,KAAK,CAAC,oCAAoC,EAAEF,GAAG,CAAC;MAC5D;IACJ;IAEA5B,SAAS,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;EAEN,OAAOF,OAAO;AAClB;AAACD,EAAA,CArDuBD,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}