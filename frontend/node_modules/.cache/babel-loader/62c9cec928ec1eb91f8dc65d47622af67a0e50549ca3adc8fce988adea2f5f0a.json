{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState, useRef } from \"react\";\nexport default function useKrakenPrices(pairs) {\n  _s();\n  const [prices, setPrices] = useState({});\n  const reconnectTimeoutRef = useRef(null);\n  const heartbeatIntervalRef = useRef(null);\n  const wsRef = useRef(null);\n  useEffect(() => {\n    let isUnmounted = false;\n    function connect() {\n      if (isUnmounted) return;\n      const ws = new WebSocket(\"wss://ws.kraken.com/v2\");\n      wsRef.current = ws;\n      ws.onopen = () => {\n        console.log(\"✅ Connected to Kraken\");\n\n        // Subscribe отново\n        ws.send(JSON.stringify({\n          method: \"subscribe\",\n          params: {\n            channel: \"ticker\",\n            symbol: pairs\n          }\n        }));\n\n        // Heartbeat (ping) на всеки 20s\n        heartbeatIntervalRef.current = setInterval(() => {\n          if (ws.readyState === WebSocket.OPEN) {\n            ws.send(JSON.stringify({\n              method: \"ping\"\n            }));\n          }\n        }, 20000);\n      };\n      ws.onmessage = event => {\n        try {\n          const msg = JSON.parse(event.data);\n          if (msg.channel === \"ticker\" && (msg.type === \"snapshot\" || msg.type === \"update\")) {\n            msg.data.forEach(ticker => {\n              setPrices(prev => ({\n                ...prev,\n                [ticker.symbol]: ticker.last\n              }));\n            });\n          }\n        } catch (err) {\n          console.error(\"Error parsing message:\", err);\n        }\n      };\n      ws.onerror = err => {\n        console.error(\"❌ WebSocket error:\", err);\n        ws.close(); // Ще мине през onclose за reconnect\n      };\n      ws.onclose = () => {\n        console.warn(\"⚠️ Disconnected. Reconnecting in 3s...\");\n        clearInterval(heartbeatIntervalRef.current);\n        reconnectTimeoutRef.current = setTimeout(() => {\n          connect();\n        }, 3000);\n      };\n    }\n    connect();\n    return () => {\n      isUnmounted = true;\n      clearTimeout(reconnectTimeoutRef.current);\n      clearInterval(heartbeatIntervalRef.current);\n      if (wsRef.current) wsRef.current.close();\n    };\n  }, [pairs]);\n  return prices;\n}\n_s(useKrakenPrices, \"a3EmJSg8eND1dWmnFs81m4Kn+Uc=\");","map":{"version":3,"names":["useEffect","useState","useRef","useKrakenPrices","pairs","_s","prices","setPrices","reconnectTimeoutRef","heartbeatIntervalRef","wsRef","isUnmounted","connect","ws","WebSocket","current","onopen","console","log","send","JSON","stringify","method","params","channel","symbol","setInterval","readyState","OPEN","onmessage","event","msg","parse","data","type","forEach","ticker","prev","last","err","error","onerror","close","onclose","warn","clearInterval","setTimeout","clearTimeout"],"sources":["C:/Users/User/Documents/Trading212/TradingSimulation/frontend/src/Cryptos/KrakenApi.js"],"sourcesContent":["import { useEffect, useState, useRef } from \"react\";\r\n\r\nexport default function useKrakenPrices(pairs) {\r\n    const [prices, setPrices] = useState({});\r\n    const reconnectTimeoutRef = useRef(null);\r\n    const heartbeatIntervalRef = useRef(null);\r\n    const wsRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        let isUnmounted = false;\r\n\r\n        function connect() {\r\n            if (isUnmounted) return;\r\n\r\n            const ws = new WebSocket(\"wss://ws.kraken.com/v2\");\r\n            wsRef.current = ws;\r\n\r\n            ws.onopen = () => {\r\n                console.log(\"✅ Connected to Kraken\");\r\n\r\n                // Subscribe отново\r\n                ws.send(JSON.stringify({\r\n                    method: \"subscribe\",\r\n                    params: {\r\n                        channel: \"ticker\",\r\n                        symbol: pairs\r\n                    }\r\n                }));\r\n\r\n                // Heartbeat (ping) на всеки 20s\r\n                heartbeatIntervalRef.current = setInterval(() => {\r\n                    if (ws.readyState === WebSocket.OPEN) {\r\n                        ws.send(JSON.stringify({ method: \"ping\" }));\r\n                    }\r\n                }, 20000);\r\n            };\r\n\r\n            ws.onmessage = (event) => {\r\n                try {\r\n                    const msg = JSON.parse(event.data);\r\n\r\n                    if (msg.channel === \"ticker\" &&\r\n                        (msg.type === \"snapshot\" || msg.type === \"update\")) {\r\n                        msg.data.forEach(ticker => {\r\n                            setPrices(prev => ({\r\n                                ...prev,\r\n                                [ticker.symbol]: ticker.last\r\n                            }));\r\n                        });\r\n                    }\r\n                } catch (err) {\r\n                    console.error(\"Error parsing message:\", err);\r\n                }\r\n            };\r\n\r\n            ws.onerror = (err) => {\r\n                console.error(\"❌ WebSocket error:\", err);\r\n                ws.close(); // Ще мине през onclose за reconnect\r\n            };\r\n\r\n            ws.onclose = () => {\r\n                console.warn(\"⚠️ Disconnected. Reconnecting in 3s...\");\r\n                clearInterval(heartbeatIntervalRef.current);\r\n\r\n                reconnectTimeoutRef.current = setTimeout(() => {\r\n                    connect();\r\n                }, 3000);\r\n            };\r\n        }\r\n\r\n        connect();\r\n\r\n        return () => {\r\n            isUnmounted = true;\r\n            clearTimeout(reconnectTimeoutRef.current);\r\n            clearInterval(heartbeatIntervalRef.current);\r\n            if (wsRef.current) wsRef.current.close();\r\n        };\r\n    }, [pairs]);\r\n\r\n    return prices;\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}