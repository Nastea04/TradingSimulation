{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState, useRef } from \"react\";\nexport default function useKrakenPrices(pairs) {\n  _s();\n  const [prices, setPrices] = useState({});\n  const wsRef = useRef(null);\n  const reconnectTimeoutRef = useRef(null);\n  const heartbeatIntervalRef = useRef(null);\n  useEffect(() => {\n    const connect = () => {\n      const ws = new WebSocket(\"wss://ws.kraken.com/v2\");\n      wsRef.current = ws;\n      ws.onopen = () => {\n        console.log(\"✅ Connected to Kraken\");\n\n        // Абонираме се за избраните символи\n        ws.send(JSON.stringify({\n          method: \"subscribe\",\n          params: {\n            channel: \"ticker\",\n            symbol: pairs\n          }\n        }));\n\n        // Изпращаме ping на всеки 20 сек.\n        heartbeatIntervalRef.current = setInterval(() => {\n          if (ws.readyState === WebSocket.OPEN) {\n            ws.send(JSON.stringify({\n              method: \"ping\"\n            }));\n          }\n        }, 20000);\n      };\n      ws.onmessage = event => {\n        try {\n          const msg = JSON.parse(event.data);\n          if (msg.channel === \"ticker\" && (msg.type === \"snapshot\" || msg.type === \"update\")) {\n            msg.data.forEach(ticker => {\n              setPrices(prev => ({\n                ...prev,\n                [ticker.symbol]: ticker.last\n              }));\n            });\n          }\n        } catch (err) {\n          console.error(\"Parse error:\", err);\n        }\n      };\n      ws.onerror = () => {\n        console.error(\"⚠️ WebSocket error, closing...\");\n        ws.close();\n      };\n      ws.onclose = () => {\n        console.log(\"🔄 Reconnecting in 3 seconds...\");\n        clearInterval(heartbeatIntervalRef.current);\n        reconnectTimeoutRef.current = setTimeout(connect, 3000);\n      };\n    };\n    connect();\n\n    // Cleanup при unmount\n    return () => {\n      console.log(\"🛑 Cleaning up WebSocket\");\n      clearTimeout(reconnectTimeoutRef.current);\n      clearInterval(heartbeatIntervalRef.current);\n      if (wsRef.current) {\n        wsRef.current.close();\n      }\n    };\n  }, [pairs]);\n  return prices;\n}\n_s(useKrakenPrices, \"0ON8pfXUIGa98XTi+Qzz6CAa1pA=\");","map":{"version":3,"names":["useEffect","useState","useRef","useKrakenPrices","pairs","_s","prices","setPrices","wsRef","reconnectTimeoutRef","heartbeatIntervalRef","connect","ws","WebSocket","current","onopen","console","log","send","JSON","stringify","method","params","channel","symbol","setInterval","readyState","OPEN","onmessage","event","msg","parse","data","type","forEach","ticker","prev","last","err","error","onerror","close","onclose","clearInterval","setTimeout","clearTimeout"],"sources":["C:/Users/User/Documents/Trading212/TradingSimulation/frontend/src/Cryptos/KrakenApi.js"],"sourcesContent":["import { useEffect, useState, useRef } from \"react\";\r\n\r\nexport default function useKrakenPrices(pairs) {\r\n    const [prices, setPrices] = useState({});\r\n    const wsRef = useRef(null);\r\n    const reconnectTimeoutRef = useRef(null);\r\n    const heartbeatIntervalRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        const connect = () => {\r\n            const ws = new WebSocket(\"wss://ws.kraken.com/v2\");\r\n            wsRef.current = ws;\r\n\r\n            ws.onopen = () => {\r\n                console.log(\"✅ Connected to Kraken\");\r\n\r\n                // Абонираме се за избраните символи\r\n                ws.send(JSON.stringify({\r\n                    method: \"subscribe\",\r\n                    params: {\r\n                        channel: \"ticker\",\r\n                        symbol: pairs\r\n                    }\r\n                }));\r\n\r\n                // Изпращаме ping на всеки 20 сек.\r\n                heartbeatIntervalRef.current = setInterval(() => {\r\n                    if (ws.readyState === WebSocket.OPEN) {\r\n                        ws.send(JSON.stringify({ method: \"ping\" }));\r\n                    }\r\n                }, 20000);\r\n            };\r\n\r\n            ws.onmessage = (event) => {\r\n                try {\r\n                    const msg = JSON.parse(event.data);\r\n                    if (msg.channel === \"ticker\" && (msg.type === \"snapshot\" || msg.type === \"update\")) {\r\n                        msg.data.forEach(ticker => {\r\n                            setPrices(prev => ({\r\n                                ...prev,\r\n                                [ticker.symbol]: ticker.last\r\n                            }));\r\n                        });\r\n                    }\r\n                } catch (err) {\r\n                    console.error(\"Parse error:\", err);\r\n                }\r\n            };\r\n\r\n            ws.onerror = () => {\r\n                console.error(\"⚠️ WebSocket error, closing...\");\r\n                ws.close();\r\n            };\r\n\r\n            ws.onclose = () => {\r\n                console.log(\"🔄 Reconnecting in 3 seconds...\");\r\n                clearInterval(heartbeatIntervalRef.current);\r\n                reconnectTimeoutRef.current = setTimeout(connect, 3000);\r\n            };\r\n        };\r\n\r\n        connect();\r\n\r\n        // Cleanup при unmount\r\n        return () => {\r\n            console.log(\"🛑 Cleaning up WebSocket\");\r\n            clearTimeout(reconnectTimeoutRef.current);\r\n            clearInterval(heartbeatIntervalRef.current);\r\n            if (wsRef.current) {\r\n                wsRef.current.close();\r\n            }\r\n        };\r\n    }, [pairs]);\r\n\r\n    return prices;\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}