{"ast":null,"code":"import express from \"express\";\nconst router = express.Router();\nrouter.get(\"/userdata/:id\", async (req, res) => {\n  const userId = req.params.id;\n  try {\n    const [cryptos, user] = await Promise.all([fetch(\"http://localhost:8080/api/cryptos\").then(r => r.json()), fetch(`http://localhost:8080/api/users/get/${userId}`).then(r => r.json())]);\n    res.json({\n      user,\n      cryptos\n    });\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({\n      error: \"Error fetching data\"\n    });\n  }\n});\nexport default router;","map":{"version":3,"names":["express","router","Router","get","req","res","userId","params","id","cryptos","user","Promise","all","fetch","then","r","json","err","console","error","status"],"sources":["C:/Users/User/Documents/Trading212/TradingSimulation/frontend/src/routes/data.js"],"sourcesContent":["import express from \"express\";\r\nconst router = express.Router();\r\n\r\nrouter.get(\"/userdata/:id\", async (req, res) => {\r\n    const userId = req.params.id;\r\n\r\n    try {\r\n        const [cryptos, user] = await Promise.all([\r\n            fetch(\"http://localhost:8080/api/cryptos\").then(r => r.json()),\r\n            fetch(`http://localhost:8080/api/users/get/${userId}`).then(r => r.json())\r\n        ]);\r\n\r\n        res.json({ user, cryptos });\r\n    } catch (err) {\r\n        console.error(err);\r\n        res.status(500).json({ error: \"Error fetching data\" });\r\n    }\r\n});\r\n\r\nexport default router;\r\n"],"mappings":"AAAA,OAAOA,OAAO,MAAM,SAAS;AAC7B,MAAMC,MAAM,GAAGD,OAAO,CAACE,MAAM,CAAC,CAAC;AAE/BD,MAAM,CAACE,GAAG,CAAC,eAAe,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAC5C,MAAMC,MAAM,GAAGF,GAAG,CAACG,MAAM,CAACC,EAAE;EAE5B,IAAI;IACA,MAAM,CAACC,OAAO,EAAEC,IAAI,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CACtCC,KAAK,CAAC,mCAAmC,CAAC,CAACC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC,EAC9DH,KAAK,CAAC,uCAAuCP,MAAM,EAAE,CAAC,CAACQ,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC,CAC7E,CAAC;IAEFX,GAAG,CAACW,IAAI,CAAC;MAAEN,IAAI;MAAED;IAAQ,CAAC,CAAC;EAC/B,CAAC,CAAC,OAAOQ,GAAG,EAAE;IACVC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;IAClBZ,GAAG,CAACe,MAAM,CAAC,GAAG,CAAC,CAACJ,IAAI,CAAC;MAAEG,KAAK,EAAE;IAAsB,CAAC,CAAC;EAC1D;AACJ,CAAC,CAAC;AAEF,eAAelB,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}