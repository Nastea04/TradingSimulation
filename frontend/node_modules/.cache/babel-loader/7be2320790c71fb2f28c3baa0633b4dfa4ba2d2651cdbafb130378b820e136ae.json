{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nexport default function useKrakenPrices(pairs) {\n  _s();\n  const [prices, setPrices] = useState({});\n  useEffect(() => {\n    const ws = new WebSocket(\"wss://ws.kraken.com/v2\");\n    ws.onopen = () => {\n      ws.send(JSON.stringify({\n        method: \"subscribe\",\n        params: {\n          channel: \"ticker\",\n          symbol: pairs\n        }\n      }));\n    };\n    ws.onmessage = event => {\n      try {\n        const msg = JSON.parse(event.data);\n        console.log(\"ðŸ“©\", event.data);\n        if (msg.channel === \"ticker\" && (msg.type === \"snapshot\" || msg.type === \"update\")) {\n          msg.data.forEach(ticker => {\n            setPrices(prev => ({\n              ...prev,\n              [ticker.symbol]: ticker.last\n            }));\n          });\n        }\n      } catch (err) {\n        console.error(\"Error:\", err);\n      }\n    };\n    return () => ws.close();\n  }, []);\n  return prices;\n}\n_s(useKrakenPrices, \"AyDZng7+aEBipOGwqaguTBzobZI=\");","map":{"version":3,"names":["useEffect","useState","useKrakenPrices","pairs","_s","prices","setPrices","ws","WebSocket","onopen","send","JSON","stringify","method","params","channel","symbol","onmessage","event","msg","parse","data","console","log","type","forEach","ticker","prev","last","err","error","close"],"sources":["C:/Users/User/Documents/Trading212/TradingSimulation/frontend/src/Cryptos/KrakenApi.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nexport default function useKrakenPrices(pairs) {\r\n    const [prices, setPrices] = useState({});\r\n\r\n    useEffect(() => {\r\n        const ws = new WebSocket(\"wss://ws.kraken.com/v2\");\r\n\r\n        ws.onopen = () => {\r\n            ws.send(JSON.stringify({\r\n                method: \"subscribe\",\r\n                params: {\r\n                    channel: \"ticker\",\r\n                    symbol: pairs\r\n                }\r\n            }));\r\n        };\r\n        \r\n        ws.onmessage = (event) => {\r\n            \r\n            try {\r\n                const msg = JSON.parse(event.data);\r\n                console.log(\"ðŸ“©\", event.data);\r\n                if (msg.channel === \"ticker\" && (msg.type === \"snapshot\"||msg.type === \"update\")) {\r\n                    msg.data.forEach(ticker => {\r\n                        setPrices(prev => ({\r\n                            ...prev,\r\n                            [ticker.symbol]: ticker.last\r\n                        }));\r\n                    });\r\n                }\r\n\r\n            } catch (err) {\r\n                console.error(\"Error:\", err);\r\n            }\r\n        };\r\n\r\n        return () => ws.close();\r\n    }, []);\r\n\r\n    return prices;\r\n}\r\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C,eAAe,SAASC,eAAeA,CAACC,KAAK,EAAE;EAAAC,EAAA;EAC3C,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGL,QAAQ,CAAC,CAAC,CAAC,CAAC;EAExCD,SAAS,CAAC,MAAM;IACZ,MAAMO,EAAE,GAAG,IAAIC,SAAS,CAAC,wBAAwB,CAAC;IAElDD,EAAE,CAACE,MAAM,GAAG,MAAM;MACdF,EAAE,CAACG,IAAI,CAACC,IAAI,CAACC,SAAS,CAAC;QACnBC,MAAM,EAAE,WAAW;QACnBC,MAAM,EAAE;UACJC,OAAO,EAAE,QAAQ;UACjBC,MAAM,EAAEb;QACZ;MACJ,CAAC,CAAC,CAAC;IACP,CAAC;IAEDI,EAAE,CAACU,SAAS,GAAIC,KAAK,IAAK;MAEtB,IAAI;QACA,MAAMC,GAAG,GAAGR,IAAI,CAACS,KAAK,CAACF,KAAK,CAACG,IAAI,CAAC;QAClCC,OAAO,CAACC,GAAG,CAAC,IAAI,EAAEL,KAAK,CAACG,IAAI,CAAC;QAC7B,IAAIF,GAAG,CAACJ,OAAO,KAAK,QAAQ,KAAKI,GAAG,CAACK,IAAI,KAAK,UAAU,IAAEL,GAAG,CAACK,IAAI,KAAK,QAAQ,CAAC,EAAE;UAC9EL,GAAG,CAACE,IAAI,CAACI,OAAO,CAACC,MAAM,IAAI;YACvBpB,SAAS,CAACqB,IAAI,KAAK;cACf,GAAGA,IAAI;cACP,CAACD,MAAM,CAACV,MAAM,GAAGU,MAAM,CAACE;YAC5B,CAAC,CAAC,CAAC;UACP,CAAC,CAAC;QACN;MAEJ,CAAC,CAAC,OAAOC,GAAG,EAAE;QACVP,OAAO,CAACQ,KAAK,CAAC,QAAQ,EAAED,GAAG,CAAC;MAChC;IACJ,CAAC;IAED,OAAO,MAAMtB,EAAE,CAACwB,KAAK,CAAC,CAAC;EAC3B,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO1B,MAAM;AACjB;AAACD,EAAA,CAvCuBF,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}