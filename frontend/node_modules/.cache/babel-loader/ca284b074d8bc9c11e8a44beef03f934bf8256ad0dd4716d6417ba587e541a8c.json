{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useRef, useState } from \"react\";\nexport default function useKrakenPrices(symbols, reconnectDelay = 3000) {\n  _s();\n  const [prices, setPrices] = useState({});\n  const wsRef = useRef(null);\n  const heartbeatRef = useRef(null);\n  const reconnectRef = useRef(null);\n  const symbolsRef = useRef(symbols);\n  const connect = () => {\n    var _symbolsRef$current;\n    if (!((_symbolsRef$current = symbolsRef.current) !== null && _symbolsRef$current !== void 0 && _symbolsRef$current.length)) {\n      connect();\n      return;\n    }\n    console.log(\"📡 Connecting...\");\n    const ws = new WebSocket(\"wss://ws.kraken.com/v2\");\n    wsRef.current = ws;\n    ws.onopen = () => {\n      console.log(\"✅ Connected\");\n\n      // subscribe за текущите символи\n      ws.send(JSON.stringify({\n        method: \"subscribe\",\n        params: {\n          channel: \"ticker\",\n          symbol: symbolsRef.current\n        }\n      }));\n      startHeartbeat(ws);\n    };\n    ws.onmessage = event => {\n      var _msg$data;\n      let msg;\n      try {\n        msg = JSON.parse(event.data);\n      } catch {\n        return;\n      }\n\n      // виждаме всички raw съобщения (debug)\n      // console.log(\"RAW:\", msg);\n\n      if (msg.channel === \"ticker\" && (_msg$data = msg.data) !== null && _msg$data !== void 0 && _msg$data.length) {\n        const symbol = msg.data[0].symbol;\n        const last = msg.data[0].last;\n        if (last) {\n          setPrices(prev => ({\n            ...prev,\n            [symbol]: parseFloat(last)\n          }));\n        }\n      }\n    };\n    ws.onerror = err => {\n      console.error(\"❌ WebSocket error:\", err);\n    };\n    ws.onclose = () => {\n      console.warn(\"⚠️ Disconnected\");\n      stopHeartbeat();\n      scheduleReconnect();\n    };\n  };\n  const startHeartbeat = ws => {\n    stopHeartbeat();\n    heartbeatRef.current = setInterval(() => {\n      if (ws.readyState === WebSocket.OPEN) {\n        ws.send(JSON.stringify({\n          method: \"ping\"\n        }));\n      }\n    }, 15000);\n  };\n  const stopHeartbeat = () => {\n    if (heartbeatRef.current) {\n      clearInterval(heartbeatRef.current);\n      heartbeatRef.current = null;\n    }\n  };\n  const scheduleReconnect = () => {\n    if (reconnectRef.current) return;\n    reconnectRef.current = setTimeout(() => {\n      reconnectRef.current = null;\n      connect();\n    }, reconnectDelay);\n  };\n\n  // стартираме връзката веднъж\n  useEffect(() => {\n    if (!symbols.length) return;\n    connect();\n    return () => {\n      stopHeartbeat();\n      if (wsRef.current) wsRef.current.close();\n      if (reconnectRef.current) clearTimeout(reconnectRef.current);\n    };\n  }, [symbols]);\n\n  // ако symbols се сменят, пращаме нов subscribe без да затваряме връзката\n  useEffect(() => {\n    var _wsRef$current;\n    symbolsRef.current = symbols;\n    if (((_wsRef$current = wsRef.current) === null || _wsRef$current === void 0 ? void 0 : _wsRef$current.readyState) === WebSocket.OPEN) {\n      wsRef.current.send(JSON.stringify({\n        method: \"subscribe\",\n        params: {\n          channel: \"ticker\",\n          symbol: symbols\n        }\n      }));\n    }\n  }, []);\n  return prices;\n}\n_s(useKrakenPrices, \"1OZT6mvBGuFa/snfSNZPQEJijYc=\");","map":{"version":3,"names":["useEffect","useRef","useState","useKrakenPrices","symbols","reconnectDelay","_s","prices","setPrices","wsRef","heartbeatRef","reconnectRef","symbolsRef","connect","_symbolsRef$current","current","length","console","log","ws","WebSocket","onopen","send","JSON","stringify","method","params","channel","symbol","startHeartbeat","onmessage","event","_msg$data","msg","parse","data","last","prev","parseFloat","onerror","err","error","onclose","warn","stopHeartbeat","scheduleReconnect","setInterval","readyState","OPEN","clearInterval","setTimeout","close","clearTimeout","_wsRef$current"],"sources":["C:/Users/User/Documents/Trading212/TradingSimulation/frontend/src/Cryptos/KrakenApi.js"],"sourcesContent":["import { useEffect, useRef, useState } from \"react\";\r\n\r\nexport default function useKrakenPrices(symbols, reconnectDelay = 3000) {\r\n    const [prices, setPrices] = useState({});\r\n    const wsRef = useRef(null);\r\n    const heartbeatRef = useRef(null);\r\n    const reconnectRef = useRef(null);\r\n    const symbolsRef = useRef(symbols);\r\n\r\n    const connect = () => {\r\n        if (!symbolsRef.current?.length) {\r\n            connect();\r\n            return;\r\n        }\r\n\r\n        console.log(\"📡 Connecting...\");\r\n        const ws = new WebSocket(\"wss://ws.kraken.com/v2\");\r\n        wsRef.current = ws;\r\n\r\n        ws.onopen = () => {\r\n            console.log(\"✅ Connected\");\r\n\r\n            // subscribe за текущите символи\r\n            ws.send(JSON.stringify({\r\n                method: \"subscribe\",\r\n                params: {\r\n                    channel: \"ticker\",\r\n                    symbol: symbolsRef.current\r\n                }\r\n            }));\r\n\r\n            startHeartbeat(ws);\r\n        };\r\n\r\n        ws.onmessage = (event) => {\r\n            let msg;\r\n            try {\r\n                msg = JSON.parse(event.data);\r\n            } catch {\r\n                return;\r\n            }\r\n\r\n            // виждаме всички raw съобщения (debug)\r\n            // console.log(\"RAW:\", msg);\r\n\r\n            if (msg.channel === \"ticker\" && msg.data?.length) {\r\n                const symbol = msg.data[0].symbol;\r\n                const last = msg.data[0].last;\r\n                if (last) {\r\n                    setPrices(prev => ({\r\n                        ...prev,\r\n                        [symbol]: parseFloat(last)\r\n                    }));\r\n                }\r\n            }\r\n        };\r\n\r\n        ws.onerror = (err) => {\r\n            console.error(\"❌ WebSocket error:\", err);\r\n        };\r\n\r\n        ws.onclose = () => {\r\n            console.warn(\"⚠️ Disconnected\");\r\n            stopHeartbeat();\r\n            scheduleReconnect();\r\n        };\r\n    };\r\n\r\n    const startHeartbeat = (ws) => {\r\n        stopHeartbeat();\r\n        heartbeatRef.current = setInterval(() => {\r\n            if (ws.readyState === WebSocket.OPEN) {\r\n                ws.send(JSON.stringify({ method: \"ping\" }));\r\n            }\r\n        }, 15000);\r\n    };\r\n\r\n    const stopHeartbeat = () => {\r\n        if (heartbeatRef.current) {\r\n            clearInterval(heartbeatRef.current);\r\n            heartbeatRef.current = null;\r\n        }\r\n    };\r\n\r\n    const scheduleReconnect = () => {\r\n        if (reconnectRef.current) return;\r\n        reconnectRef.current = setTimeout(() => {\r\n            reconnectRef.current = null;\r\n            connect();\r\n        }, reconnectDelay);\r\n    };\r\n\r\n    // стартираме връзката веднъж\r\n    useEffect(() => {\r\n        if (!symbols.length) return;\r\n        connect();\r\n        return () => {\r\n            stopHeartbeat();\r\n            if (wsRef.current) wsRef.current.close();\r\n            if (reconnectRef.current) clearTimeout(reconnectRef.current);\r\n        };\r\n    }, [symbols]);\r\n\r\n    // ако symbols се сменят, пращаме нов subscribe без да затваряме връзката\r\n    useEffect(() => {\r\n        symbolsRef.current = symbols;\r\n        if (wsRef.current?.readyState === WebSocket.OPEN) {\r\n            wsRef.current.send(JSON.stringify({\r\n                method: \"subscribe\",\r\n                params: {\r\n                    channel: \"ticker\",\r\n                    symbol: symbols\r\n                }\r\n            }));\r\n        }\r\n    }, []);\r\n\r\n    return prices;\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}